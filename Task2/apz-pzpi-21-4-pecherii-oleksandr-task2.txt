1 МЕТА РОБОТИ

	Мета даної роботи полягає у створенні серверної частини проекту та створенні звіту, що містить опис інженерних рішень та посиланнями на програмний код. Під час виконання лабораторної роботи повинно бути розроблено наступні діаграми: UML діаграма розгортання, UML діаграма прецедентів, UML діаграму активності та ER-модель даних.

2 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ

Першим кроком чітко визначити та описати всі необхідні сутності системи для реалізації визначеного функціоналу. Цьому допоможе розробка ER-моделі даних, яка візуалізує всі сутності ті зв’язки між ціми сутностями. Після того, як були визначені усі сутності була створена ER-модель даних(див. рис. Б.1 у додатку Б). 
	Модель даних включає в себе наступні сутності та поля:
	а) користувач:
		1) користувач_id;
	2) пароль;
	3) елелктрона_пошта;
	4) ім’я;
	5) прізвище;
	6) роль;
	7) дата_створення;
	8) зріст;
	9) розмір_ноги;
б) організатор:
	1) організатор_id;
	2) ім’я;
	3) тип;
в) спорядження:
	1) спорядження_id;
	2) організатор_id;
	3) розмір_костюму_id;
	4) ім’я;
	5) тип;
	6) розмір;
	7) використовується;
г) розмір_костюму:
	1) розмір_костюму_id;
	2) розмір; 
д) комп’ютер_для_занурення:
	1)  комп’ютер_для_занурення_id;
	2) глибина;
	3) час_занурення;
е) діяльність:
	1) діяльність_id;
	2) організатор_id;
	3) ім’я;
	4) країна;
	5) опис;
	6) місця;
	7) час;
є) участь:
	1) участь_id;
	2) діяльность_id;
	3) користувач_id;
	4) спорядження_id;
	5) группа;
	6) спорядження_розподілене;
	ж) повідомлення:
		1) повідомлення_id;
		2) користувач_id;
		3) текст;
	4) час.
	Описанні вище сутності та поля мають усе необхідне для реалізації запланованого функціоналу системи.
Тепер, коли всі сутності були визначені ми можемо перейти до сценаріїв використання системи. Увесь функціонал описаний у документі Vision & Scope був розподілений між пятью акторами, а саме: гість, користувач, організатор, адміністратор та датчик.Під час першого використання системи, людина є гістем. Гість може лише переглядати інформацію, таку як інформацію про організаторів та список запланованих діяльностей. Щоб отримати доступ до іншого функціоналу системи, йому потрібно зареєструватися та увійти до системи.
	Людина може увійти до системи як користувач, організатор чи адміністратор. Користувач має можливість переглядати та редагувати інформацію про себе. Окрім цього він може приєднатися до участі до зазначеної діяльності.
	Організатор має можливість переглядати та редагувати інформацією про організаторів, про діяльності та про спорядження, що вони використовують. 
	Адміністратор має доступ до будь-якого функціоналу та інформації у системі. Також він має можливість створення запасної копії бази даних. 
	Датчик вимірює поточну глибину та час занурення та надає цю інформацію системі.
	На основі представленних сценаріїв використання системи була створена UML діаграма прецедентів(див. рис. Б.2 у додатку Б). Таким чином, в результаті концептуального моделювання предметної області, були визначені основні сутності програмної системи, поля, що їм належать, та створені дві діаграми. Далі будуть розглянуті прийняті інженерні рішення. 

3 ІНЖЕНЕРНІ РІШЕННЯ
3.1 Використані технології

Вибір технологій для розробки серверної частини був заснований відповідно до функціональних вимог. Для написання серверної частини було обрано фреймворк Django у поєднанні з Django REST Framework для реалізації RESTful веб-сервісів. Django надає широкий функціонал для швидкої розробки веб-додатків, а Django REST Framework спрощує створення API на основі архітектурного стилю REST.
Система використовує архітектуру MTV. Даний архітектурний стиль використовується в Django для побудови веб-додатків. У цій архітектурі, модель відповідає за представлення даних та бізнес-логіку, виноситься на вищий рівень для спрощення розробки та підтримки коду. Вид обробляє запити користувача, взаємодіє з моделлю для отримання необхідних даних та передає їх у шаблон для відображення. Ця структура чітко розділяє обов'язки між компонентами, полегшуючи розробку та підтримку коду, та сприяє швидкості розробки за рахунок використання вбудованих функцій та шаблонів.
У ролі бази даних було обрано PostgreSQL, оскільки вона є потужною реляційною базою даних, яка надає велику кількість функцій для забезпечення ефективного зберігання та операцій з даними. Окрім цього Django має вбудовану підтримку PostgreSQL, що робить інтеграцію з цією базою даних дуже простою. Вона підтримує всі функції Django ORM та може легко взаємодіяти з іншими компонентами Django, такими як адміністративний інтерфейс та форми.
Спілкування між серверною і клієнтською частинами, а також з мобільним додатком та IoT, реалізоване за допомогою REST API. Цей тип спілкування забезпечує загальну структуру взаємодії та дозволяє легко додавати різні компоненти системи. Більш детальна інформація про взаємодію різних частин системи може бути представлена на UML-діаграмі розгортання (див. рис. 3.1).
Для демонстрації головного для користувача функціоналу, а саме створення та запис на участь у діяльності з занурення, була розроблена діаграма активності (див. рис. 3.2). На неї відображено головні дії та етапи, які потрібно здійснити користувачеві та організатори для досягнення мети.
Людина авторихується до системи як користувач чи як організатор. Організатор створює діяльність. Організатор розподіляє спорядження між групою користувачів. Якщо вільне спорядження відстунє, то органіщатор повертається на крок назад. Якщо вільне спорядження наявне, то організатор переглядає дані про участь у діяльності. Користувач приєднується доя запланованої діяльності. Користувач отримує комп'ютер для занурень. Якщо підключення завдовільне, то він переглядає дані про участь у діяльності.

3.2 Структура проекта

Система має стандартную структуру для проекту Django, яка складається з наступних компонентів:
а) Каталог Django Project:
1) Файл manage.py, який здійснює запуск сервера;
2) Файл settings.py, який зберігає налаштування проекту;
3) Файл urls.py, який зберігає конфігурацію для веб-сервісів;
б) Каталог Django App:
1) Файл models.py, де описуються моделі;
2) Файл views.py для визначення логіки та обробки запитів; 
3) Файл forms.py для визначення форм для обробки введення.
4) Файл backup_db.py для збереження функціоналу з резервного копіювання бази даних;
5) Каталог backups, для збереження копій бази даних;
6) Каталог templates, для зберігання шаблонів проекту.

3.3 Специфікація REST API 

Специфікація REST API наведена нижче в таблиці 1.

Таблиця 1 - Специфікація REST API серверної частини системи
| Сутність                  | HTTP Метод | Посилання                          | Дія                                             |
|---------------------------|------------|------------------------------------|-------------------------------------------------|
| Користувачі               | POST       | /login/                            | Увійти до системи                               |
|                           | POST       | /register/                         | Реєстрація нового користувача                   |
|                           | POST       | /backup/                           | Створення резервної копії бази даних            |
|                           | GET        | /logout/                           | Вихід із системи                                |
| Організатори              | GET        | /organizers/                       | Виводить список всіх організаторів              |
|                           | GET        | /organizers/<int:id>/              | Виводить деталі конкретного організатора        |
|                           | POST       | /organizers/create/                | Створення нового організатора                   |
|                           | POST       | /organizers/<int:id>/update/       | Оновлення існуючого організатора                |
|                           | DELETE     | /organizers/<int:id>/delete/       | Видалення існуючого організатора                |
| Спорядження               | GET        | /gears/                            | Виводить список усього спорядження              |
|                           | GET        | /gears/<int:id>/                   | Виводить деталі конкретного спорядження         |
|                           | POST       | /gears/create/                     | Створення нового спорядження                    |
|                           | POST       | /gears/<int:id>/update/            | Оновлення існуючого спорядження                 |
|                           | DELETE     | /gears/<int:id>/delete/            | Видалення існуючого спорядження                 |
| Комп’ютер для занурення   | GET        | /dive_computers/                   | Виводить список всіх комп'ютерів                |
|                           | GET        | /dive_computers/<int:id>/          | Виводить деталі конкретного комп’ютера          |
|                           | POST       | /dive_computers/create/            | Створення нового комп’ютера                     |
|                           | POST       | /dive_computers/<int:id>/update/   | Оновлення існуючого комп’ютера                  |
|                           | DELETE     | /dive_computers/<int:id>/delete/   | Видалення існуючого комп’ютера                  |
| Діяльність                | GET        | /activities/                       | Виводить список усіх діяльностей                |
|                           | GET        | /activities/<int:id>/              | Виводить деталі конкретної діяльності           |
|                           | POST       | /activities/create/                | Створення нової діяльності                      |
|                           | POST       | /activities/<int:id>/update/       | Оновлення існуючої діяльності                   |
|                           | POST       | /activities/<int:id>/distribute-gear/ | Розподіл спорядження                         |
|                           | POST       | /activities/<int:id>/distribute-gear/ | Звільнення спорядження                        |
|                           | DELETE     | /activities/<int:id>/delete/       | Видалення існуючої діяльності                   |
| Участь                    | GET        | /participations/                   | Виводить список всіх участей                    |
|                           | GET        | /participations/<int:id>/          | Виводить деталі конкретної участі               |
|                           | POST       | /participations/create/            | Створення нової участі                          |
|                           | POST       | /participations/<int:id>/update/   | Оновлення існуючої участі                       |
|                           | DELETE     | /participations/<int:id>/delete/   | Видалення існуючої участі                       |

3.4 Автоматизація розподілу спорядження

Основна мета методу gear_distribution це автоматизація процесу розподілу спорядження між групою учасників діяльності, що містить в собі обробку даних користувачів та представляє собою важливу частину бізнес-логіки.
Перш за все, метод gear_distribution перевіряє метод запиту та отримує потрібну активність (див. рядки 2-7, розділ A.1 у додатку А). Це важливо для забезпечення коректності обробки запиту та надання відповіді користувачу.
Далі, метод перебирає усіх учасників у циклі та для кожного учасника ми перебираємо доступне спорядження, яке відповідає розміру та типу (див. рядки 11-33, розділ A.1 у додатку А). Якщо спорядження знайдено, воно резервується для участника (див. рядки 36-47, розділ А.1 у додатку А). Це важливо для забезпечення кожного учасника необхідним спорядженням для здійснення активності.
У методі також перевіряється коректність обробки запиту та надається відповідна відповідь у разі, якщо тип запиту не підтримується (див. рядки 56-57, розділ A.1 у додатку А). 

3.5 Створення копії бази даних

Метод get_backup_directory відповідає за створення каталогу для збереження копій бази даних. Він використовує шлях до поточного файлу для визначення шляху до додаткового каталогу "backups", куди будуть збережені копії. Якщо каталог не існує, він буде створений. Ця функція допомагає підготувати середовище для збереження резервних копій перед їх створенням.
Метод backup_database відповідає за створення копії бази даних PostgreSQL. Він використовує pg_dump для створення файлу копії в форматі "custom" (-Fc) (див. рядок 19 розділ А.2 у додатку А), що дозволяє зберегти схему та дані бази даних у бінарному форматі. Резервна копія зберігається у вказаному каталогу, з ім'ям файлу, яке містить дату та час створення копії. Цей метод є важливою частиною бізнес-логіки для забезпечення безпеки та захисту даних, оскільки дозволяє швидко відновлювати базу даних в разі її пошкодження або втрати.

3.6 Перевірка даних при вводі на правильність

Може існувати ситуація, коли дані, що ввів користувач не відповідають встановленим системою правилам. Для цього була введена перевірка даних при вводі, що є невід’ємною частиною бізнес-логіки. Якщо користувач, наприклад, ввів свою електронну пошту в неправильному форматі чи при реєстрації надав занадто простий пароль, то при данній перевірці система видасть виключення та повідомляє про це користувача. Це забезпече коректність даних та підвищить захищеність системи, покращуючи її бізнес-логіку. Код наведених функцій наведений нижче:
1  def clean_email(self):
2      email = self.cleaned_data.get('email')
3      if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
4          raise forms.ValidationError("Please enter a valid email address.")
5      return email
6  
7  def clean_password(self):
8      password = self.cleaned_data.get('password')
9      if len(password) < 8:
10         raise forms.ValidationError("Password must be at least 8 characters long.")
11     return password

4 ВИСНОВКИ

В результаті виконання даної лабораторної роботи була розроблена серверна частина системи. Були розроблені діаграми для кращого розуміння сценарії використання системи, її архітектури, взаємодії між її компонентами та діями, що вона виконує. Також був зроблений запис, де було продемонстровано тестування системи (DEMO: https://youtu.be/D9THg4-mI_o).
